using System;
using System.Diagnostics;
using System.Globalization;
using System.Net.WebSockets;
using System.Threading.Tasks;
using BLL.Interface;
using BLL.Utilities;
using Common.DTO;
using DAL.Entities;
using DAL.UnitOfWork;

using Microsoft.AspNetCore.Identity;

namespace BLL.Service
{
    public class UserService : IUserService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly UserUtility _userUtility;

        public UserService(IUnitOfWork unitOfWork, UserUtility userUtility)
        {
            _unitOfWork = unitOfWork;
            _userUtility = userUtility;
        }

        public async Task<User> GetUserByUserNameAsync(string userName)
        {
            return await _unitOfWork.User.GetByEmailOrUserNameAsync(userName);
        }

        public async Task<User> GetUserByEmailAsync(string email)
        {
            return await _unitOfWork.User.GetUserByEmailAsync(email);
        }
        private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt)
        {
            using (var hmac = new System.Security.Cryptography.HMACSHA512())
            {
                passwordSalt = hmac.Key;
                passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            }
        }

        public async Task<bool> RegisterUserAsync(UserRegisterDTO newUserDTO)
        {
            if (await _unitOfWork.User.IsUserExistAsync(newUserDTO.UserName, newUserDTO.Email))
            {
                return false;
            }




            PasswordHashResultDTO passwordHashResult = _userUtility.CreateHashPassword(newUserDTO.Password);

            byte[] passwordHash, passwordSalt;
            CreatePasswordHash("123456", out passwordHash, out passwordSalt);


            var newUser = new User()
            {
                UserId = Guid.NewGuid(),
                UserName = newUserDTO.UserName,
                Email = newUserDTO.Email,
                Phone = newUserDTO.Phone,
                BirthDay = newUserDTO.BirthDay,
                Gender = newUserDTO.Gender,
                Address = newUserDTO.Address,
                PasswordHash = passwordHashResult.Hash,
                PasswordSalt = passwordHashResult.Salt,
          

            };

            await _unitOfWork.User.AddAsync(newUser);
            await _unitOfWork.SaveChangeAsync();
            return true;
        }

        public async Task<bool> IsUserExistAsync(string userName, string email)
        {
            return await _unitOfWork.User.IsUserExistAsync(userName, email);
        }
        public async Task<bool> CreateParentAccountAsync(CreateParentAccountDTO parentAccountDTO)
            {
            using (var transaction = _unitOfWork.BeginTransaction(System.Data.IsolationLevel.ReadCommitted))
            {


                try
                {
                    // Kiểm tra email phụ huynh đã tồn tại chưa
                    var existingParent = await _unitOfWork.User.GetUserByEmailAsync(parentAccountDTO.ParentEmail);
                    if (existingParent != null)
                    {
                        return false;
                    }

                    // Kiểm tra từng mối quan hệ học sinh
                    foreach (var relationship in parentAccountDTO.StudentRelationships)
                    {
                        var student = await _unitOfWork.User.GetUserByEmailAsync(relationship.StudentEmail);
                        if (student == null || student.RoleId != 3)
                        {
                            transaction.Rollback(); // Hủy transaction nếu có lỗi
                            return false;
                        }
                    }

                    // Tạo mật khẩu tự động
                    string autoGeneratedPassword = "12345";
                    byte[] passwordHash, passwordSalt;
                    CreatePasswordHash(autoGeneratedPassword, out passwordHash, out passwordSalt);

                    // Tạo người dùng phụ huynh
                    var parentRole = await _unitOfWork.Role.GetByConditionAsync(r => r.RoleName == "Parent");
                    if (parentRole == null)
                    {
                        transaction.Rollback();
                        return false;
                    }

                    var newParent = new User
                    {
                        UserId = Guid.NewGuid(),
                        UserName = parentAccountDTO.ParentName,
                        Email = parentAccountDTO.ParentEmail,
                        PasswordHash = passwordHash,
                        PasswordSalt = passwordSalt,
                        IsEmailConfirmed = true,
                        CreateAt = DateTime.UtcNow,
                        RoleId = 4
                    };

                    await _unitOfWork.User.AddAsync(newParent);

                    // Tạo các mối quan hệ
                    foreach (var relationship in parentAccountDTO.StudentRelationships)
                    {
                        var student = await _unitOfWork.User.GetUserByEmailAsync(relationship.StudentEmail);
                        var newRelationship = new Relationship
                        {
                            RelationshipId = Guid.NewGuid(),
                            ParentId = newParent.UserId,
                            StudentId = student.UserId,
                            RelationshipName = relationship.RelationshipName,
                            CreateAt = DateTime.UtcNow
                        };

                        await _unitOfWork.Relationship.AddAsync(newRelationship);
                    }

                    await _unitOfWork.SaveChangeAsync();
                    transaction.Commit(); // Xác nhận transaction
                    return true;
                }
                catch (Exception)
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        public async Task<ResponseDTO> RetrieveUserClassInfoAsync(Guid studentId)
        {
            try
            {
                var student = await _unitOfWork.User.GetByIdAsync(studentId);

                if (student == null)
                {
                    return new ResponseDTO("User not found", 404, false, string.Empty);
                }

                var classInfo = student?.ClassId != null ? await _unitOfWork.Class.GetByIdInt((int)student.ClassId) : null;
                if (classInfo == null)
                {
                    return new ResponseDTO("Class not found", 404, false, string.Empty);
                }

                var classDetail = new StudentClassResponseDTO
                {
                    ClassId = classInfo.ClassId,
                    ClassName = classInfo.Name,
                    TeacherId = classInfo.TeacherId,
                };
                
                return new ResponseDTO("Retrieve class success", 200, true, classDetail);
            }
            catch (Exception ex)
            {
                return new ResponseDTO($"Error: {ex.Message}", 500, false, string.Empty);
            }
        }

        public async Task<ResponseDTO> GetAvailableSlotsAsync(Guid userId, DateOnly selectedDate)
        {
            try
            {
                var date = DateTime.Parse(selectedDate.ToString());
                var userSchedules = await _unitOfWork.Schedule.GetAllByListAsync(s => s.UserId == userId && s.Date == date);

                if (userSchedules == null || !userSchedules.Any())
                    return new ResponseDTO("No schedules found for the user on this date.", 404, false, null);

                var slotIds = userSchedules.Select(s => s.SlotId).ToList();

                var bookedSlots = await _unitOfWork.Appointment.GetAllByListAsync(a => slotIds.Contains(a.SlotId) && a.Date == selectedDate);

                var availableSlots = slotIds.Except(bookedSlots.Select(s => s.SlotId)).ToList();

                if (!availableSlots.Any())
                    return new ResponseDTO("No available slots.", 404, false, null);

                return new ResponseDTO("Get available slots success", 200, true, availableSlots);
            }
            catch (Exception ex)
            {
                return new ResponseDTO($"Error: {ex.Message}", 500, false, string.Empty);
            }
        }

        public async Task<ResponseDTO> GetPsychologistsAsync()
        {
            try
            {
                var psychologists = await _unitOfWork.User.GetAllByListAsync(u => u.RoleId == 2);
                var list = psychologists.Select(p => new PsychologistResponseDTO
                {
                    UserId = p.UserId,
                    FirstName = p.FirstName,
                    LastName = p.LastName,
                    FullName = p.FullName,
                    PhoneNumber = p.Phone,
                    Email = p.Email,
                    BirthDay = p.BirthDay,
                    Gender = p.Gender,
                    Address = p.Address,
                });

                if (!list.Any()) return new ResponseDTO("No data available", 200, true, string.Empty);

                return new ResponseDTO("Retrieve psychologists successfully", 200, true, list);
            }
            catch (Exception ex)
            {
                return new ResponseDTO($"Error: {ex.Message}", 500, false, string.Empty);
            }
        }

        public async Task<ResponseDTO> GetUserProfile(Guid userId)
        {
            try
            {
                var user = await _unitOfWork.User.GetByIdAsync(userId);

                if (user == null) return new ResponseDTO("User not found", 400, false, string.Empty);

                CultureInfo cultureInfo = new CultureInfo("vi-VN");


                var profile = new UserProfileDTO
                {
                    FirstName = user.FirstName ?? "",
                    LastName = user.LastName ?? "",
                    FullName = user.FullName ?? "",
                    BirthDay = user.BirthDay.ToString("d", cultureInfo),
                    Gender = user.Gender,
                    Address = user.Address,
                    Email = user.Email,
                    Phone = user.Phone,
                };

                return new ResponseDTO("Get user profile successfully", 200, true, profile);
            }
            catch (Exception ex)
            {
                return new ResponseDTO($"Error: {ex.Message}", 500, false, string.Empty);
            }
        }
    }
}
